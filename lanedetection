% EcoCAR 3 Advanced Driver Assistance System (ADAS) Vision Tool Check 

%reset MATLAB programs currently runnning so this program can start
close all
clear all
clc

%this is a blob Analysis function. It will monitor the blobs of white
%pixels on the screen in a binary image. we will discuss this later on.
BA = vision.BlobAnalysis('MinimumBlobArea', 500);
%This is a input video player. It opens the given video for reading
FR = vision.VideoFileReader('ADAStest.mp4');%open input video
%this sets the output video type to uint8. Don't worry about what it means
%its not really that important
FR.VideoOutputDataType = 'uint8'; %set the data type of the video output
%this is the output video player so we can see it on the screen
vidPlayer = vision.DeployableVideoPlayer('Name','RGB Video Player');
%this line is commented out. uncommented, it will write to a video file
%I rarely actually do this
%V = VideoWriter('roadwithLaneCount2.avi');
%video file to be created for writing
%this line is commented out for the same video file reason
%open(V) %open the file for video writing

%counter to show percent of video completed to the implementer
c = 0;
%This is an array of size 20. it is used to take a running average
%of the last 20 "lane counts" that way if the computer gets a few wrong, it
%is taking an average so it will be more accurate
LaneAverage = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]; 
%tic starts a timer
tic
%percentCorrect will be used for testing to determine what percent of the
%lane counts it gets correct. In this sampe video, the number of lanes or 
%"lane count" is 2 at all times, so if the program detects the lane count
%to be 2 70% of the time, its percentCorrect will be 70
percentCorrect = 0;
%this variable holds the percent correct at a certain time in the program
%this is also just for testing
b = 0;
%we are going to continue looping through the frames of the video until
%their are no more frames in the video
while (~isDone(FR))
    %frame is equal to the next frame in the input video file
    frame = step(FR);
    %% DeltaT calculation (Diagnostics)
    %this section calculates the change in time from real time to the speed
    %that the program is runnning
    
    %this is a counter counting the frames. 
    c = c + 1;
    %at any frame "c", if you divide c/(total frames = 1356) thats what
    %percent of the video has been completed. So multiplying that by 54
    %seconds of video gives the time that has passed in the video. "toc" is
    %the time that has passed since the program began in real time 
    deltaT = ((c)/1356 * 54) - toc;
    %now we know how far off the program is running from real time which is
    %important to know
    %% Crop and HSV Image
    %each frame is composed of 3 2-dimential arrays of values. so length
    %and width are the size of the resolution of the image and depth will
    %be 3.
    [length, width, depth] = size(frame);
    %rect will crop the current frame into a tiny window for us to monitor
    %the smaller this window, the less the computer has to process and the
    %faster it will run    180      60
    rect = [0 length-180 width 60]; %adjust for frame of video stream
    %this is the line that actually crops the frame specified by the size
    %of rect
    frame = imcrop(frame,rect);
    %this line converts the iage from "rgb" to "hsv" these are color
    %systems for images.
    frame = rgb2hsv(frame);%convert frame from rgb to hsv
    %% Threshold to obtain binary mask
    %this calls a threshhold function that will take the colored cropped
    %frame and convert it to black and white. Hopefully, the road will be
    %the only white thing because of the values chosen in the function.
    %I'll explain more in that function
    frame = thresholdImage2(frame); %threshold the image using a function
    %% Insert Box on Screen (Diagnostics)
    %this line is very important. This is the part where the blob analysis
    %comes into play. This line will analyze the blobs of white pixels on
    %the road and give us imformation about them such as area, centroid and
    %bbox of the blobs in the form of arrays. 
    %The only information we use is the area and bbox of the blobs. I will
    %explain this later
    [area, centroid, bbox] = step(BA, frame);
    %this line converts the binary image to "uint8". thats the format we
    %need to display it.
    frame = im2uint8(frame);
    %This part of the program is using a little bit of luck to hopefully
    %get us the right answer. Since a road is a very larger area of simular
    %color, I am assuming in this line that the road blob of white pixels
    %is the largest of the blobs detected by the blob analysis function.
    %However, this is where the program sometimes finds another part of the
    %screen such as a road divider or something that is larger in area. I
    %think this wont be a problem after we adjust some things with the
    %program later on.
    %To put it simply, this line returns the largest area and index of the
    %largest area of all the blobs in the blob array.
    [largestArea, largestIndex] = max(area);
    %now that we know the largest area blob, and we assume its the road, we
    %want to remove all other blobs from the screen and just show the road.
    %this function will do ust that by removing blobs that are less than
    %the area of the largest blob.
    frame = bwareaopen(frame, double(largestArea)); %make blobs less than 600 pixels in
    %Now, we need to track the road. This part is mostly just for testing
    %and shows a rectangle around the road so we can see it.
    frame = insertShape(uint8(frame), 'Rectangle', bbox(largestIndex,:), 'Color', 'blue', 'LineWidth', 4);
    %% Running Average of Road Lanes
    %This is the part where we calculate the running average of the last 20
    %frames.
    
    %first we calculate the width of the road from the bbox array from the
    %blob analysis function. The bbox standing for bounding box and will
    %tell us the width of the road blog.
    widthOfRoad = bbox(largestIndex, 3);
    %if you know the width of the road and you know there are 350 pixels in
    %one lane, dividing the width by the width of one lane will give you
    %the number of lanes. taking the "floor()" function of that gives us an
    %integer. This is because 2.6 lanes in distance is still only 2 lanes
    numOfLanes = floor(widthOfRoad / 350); %350 is ~ width of a lane in pixels
    %this is a swap algorithm to move all the elements in the array to the
    %following index. I will explain this section in person its too
    %difficult to explain it in writing
    temp = LaneAverage(1);
    LaneAverage(1) = numOfLanes;
    count = 2;
    while(count < 20) %sample size for average is set to 20
        temp2 = LaneAverage(count);
        LaneAverage(count) = temp;
        temp = LaneAverage(count + 1);
        LaneAverage(count + 1) = temp2;
        count = count + 1;
    end
    %% Lane User is In
    %this part of the program calculates which lane the user is in. I will
    %also explain this in person its too hard to do in writing.
    x = round(sum(LaneAverage)/nnz(LaneAverage)); %the running average
    if(x == 2)
        percentCorrect = percentCorrect + 1;
        b = (percentCorrect / c) * 100;
    end
    laneIn = 1;
    if(x > 1)
        wLanes = widthOfRoad / x;
        laneIn = ceil((width/2 - bbox(largestIndex, 1))/(wLanes));
    end
    %output which lane you are in based on the center of the frame's
    %location in the box
    %% Text Box (Diagnostics)
    %this line outputs the result to the screen so we can see it. This is
    %just for testing purposes.
    if(numOfLanes == 2)
        %simFrame 
    end
        frame = insertText(frame, [0 0], ['%', num2str(b), ' DeltaT: ',num2str(deltaT), ' Lane: ', num2str(laneIn), ' of ', num2str(x)], ...
        'FontSize', 26, 'TextColor', 'red', 'BoxColor', 'yellow');
    %% Write frame to file/play frame
    %this line is neccessary for video output
    frame = single(logical(frame)); %used for writing to video file
    %writeVideo(V,frame); %write frame to the video file
    step(vidPlayer,frame); % Plays the frame
end
fprintf('file written'); %confirmation that output video file
%is ready for playback
%close(V) %closes the video file
percentCorrect = (percentCorrect / 1356) * 100;
%displays the final amount of frames the program correcty calculated
disp(percentCorrect);
release(FR); % Release the memory and file handles of the video file reader
release(vidPlayer);
